"use client";
import { useFormContext } from "@/context/FormContext";
import Form from "../Form";
import Button from "@/components/ui/button/Button";
import InputForm from "../form-elements/InputForm";
import { useNotification } from "@/context/NotificationContext";
import { FaRegSmileBeam } from "react-icons/fa";
import SelectForm from "../form-elements/SelectForm";
import RadioGroup from "../form-elements/RadioButtons";
import { usePrefill } from "@/hooks/usePrefill";

export default function AddForm() {
  const { values, setErrors} = useFormContext();
  const { openNotification } = useNotification();

  usePrefill({
    name: "Nguy·ªÖn VƒÉn A",
    phone: "0912345678",
    email: "vanapx2004@gmail.com",
    password: "123456",
    confirmPassword: "123456",
    role: "1",
    status: "1",
    });

  const handleSubmit = (data: Record<string, any> | FormData) => {
    const newErrors: { name: string; message: string }[] = [];

    // validate text fields
    if (!values.name) newErrors.push({ name: "name", message: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    if (!values.description) newErrors.push({ name: "description", message: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    if (!values.images) newErrors.push({ name: "images", message: "Vui l√≤ng ch·ªçn ·∫£nh" });

    setErrors(newErrors);

    if (newErrors.length === 0) {
      if (data instanceof FormData) {
        // multipart submit
        console.log("üöÄ Multipart FormData submit:");
        for (const [key, value] of data.entries()) {
          console.log(key, value);
        }
        console.log("Categories:", data); // n·∫øu l√† multi select
      } else {
        // json submit
        console.log("üöÄ JSON submit:", data);
      }
      openNotification({
          message: "Custom Notification",
          description: "N·ªôi dung chi ti·∫øt th√¥ng b√°o",
          placement: "top",
          duration: 3,
          icon: <FaRegSmileBeam style={{ color: "green" }} />,
          style: { borderLeft: "5px solid green" },
        })
    } else {
      console.log("‚ùå Errors:", newErrors);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <InputForm label="T√™n nh√¢n vi√™n" name="name" placeholder="Nh·∫≠p t√™n nh√¢n vi√™n" />
      <InputForm label="S·ªë ƒëi·ªán tho·∫°i" name="phone" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
      <InputForm label="Email" name="email" placeholder="Nh·∫≠p email" type="email"/>
      <InputForm label="M·∫≠t kh·∫©u" name="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u" type="password"/>
      <InputForm label="X√°c nh·∫≠n m·∫≠t kh·∫©u" name="confirmPassword" placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" type="password"/>
      <SelectForm className="w-full" label="Vai tr√≤" name="role" placeholder="Ch·ªçn vai tr√≤" options={[{value: '1', label: 'Role 1'}, {value: '2', label: 'Role 2'}]} />
      <RadioGroup title="Tr·∫°ng th√°i" name="status" options={
        [
          {
            value: '1',
            label: 'Ho·∫°t ƒë·ªông',
          },
          {
            value: '2',
            label: 'Ng·ª´ng ho·∫°t ƒë·ªông',
          },
          {
            value: '3',
            label: 'Ch·ªù x√°c nh·∫≠n',
          }
        ]
      } defaultValue="1"/>
      <div className="flex justify-center">
        <Button type="submit" variant="primary" className="mt-4" size="md">
          S·ª≠a nh√¢n vi√™n
        </Button>
      </div>
    </Form>
  );
}
