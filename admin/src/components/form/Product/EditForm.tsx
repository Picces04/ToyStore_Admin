"use client";
import { useFormContext } from "@/context/FormContext";
import Form from "../Form";
import Button from "@/components/ui/button/Button";
import InputForm from "../form-elements/InputForm";
import TextAreaForm from "../form-elements/TextAreaForm";
import { useNotification } from "@/context/NotificationContext";
import { FaRegSmileBeam } from "react-icons/fa";
import DropzoneImageInput from "../form-elements/DropZone";
import SelectForm from "../form-elements/SelectForm";
import SwitchForm from "../form-elements/SwitchForm";
import { usePrefill } from "@/hooks/usePrefill";

export default function AddForm() {
    const { values, setErrors } = useFormContext();
    const { openNotification } = useNotification();

    usePrefill({
        name: "T√™n S·∫£n Ph·∫©m",
        images: ["https://tse1.mm.bing.net/th/id/OIP.CFG1RgZ9gTRtNgk_wWxG8QHaEO?rs=1&pid=ImgDetMain&o=7&rm=3"],
        category: ["1"],
        brand: ["1"],
        price: 100000,
        description: "M√¥ t·∫£ s·∫£n ph·∫©m",
    });

    const handleSubmit = (data: Record<string, any> | FormData) => {
        const newErrors: { name: string; message: string }[] = [];

        // validate text fields
        // if (!values.title) newErrors.push({ name: "title", message: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
        // if (!values.content) newErrors.push({ name: "content", message: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
        // if (!values.image) newErrors.push({ name: "image", message: "Vui l√≤ng ch·ªçn ·∫£nh" });
        // if (!values.publishDate) newErrors.push({ name: "publishDate", message: "Vui l√≤ng ch·ªçn ng√†y ƒëƒÉng" });

        setErrors(newErrors);

        if (newErrors.length === 0) {
            if (data instanceof FormData) {
                // multipart submit
                console.log("üöÄ Multipart FormData submit:");
                for (const [key, value] of data.entries()) {
                    console.log(key, value);
                }
                console.log("Categories:", data); // n·∫øu l√† multi select
            } else {
                // json submit
                console.log("üöÄ JSON submit:", data);
            }
            openNotification({
                message: "Custom Notification",
                description: "N·ªôi dung chi ti·∫øt th√¥ng b√°o",
                placement: "top",
                duration: 3,
                icon: <FaRegSmileBeam style={{ color: "green" }} />,
                style: { borderLeft: "5px solid green" },
            })
        } else {
            console.log("‚ùå Errors:", newErrors);
        }
    };

    return (
        <Form onSubmit={handleSubmit} mode="multipart">
            <InputForm label="T√™n s·∫£n ph·∫©m" name="name" placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m" />
            <DropzoneImageInput name="images" multiple className="mt-4" />
            <SelectForm label="Danh m·ª•c" name="category" placeholder="Ch·ªçn danh m·ª•c" options={[{ value: '1', label: 'Category 1' }, { value: '2', label: 'Category 2' }]} />
            <SelectForm label="Th∆∞∆°ng hi·ªáu" name="brand" placeholder="Ch·ªçn th∆∞∆°ng hi·ªáu" options={[{ value: '1', label: 'Brand 1' }, { value: '2', label: 'Brand 2' }]} />
            <InputForm label="Gi√°" name="price" placeholder="Nh·∫≠p gi√°" type="number" />
            <SwitchForm
                name="switch1"
                defaultChecked={true}
                onLabel="Hot"
                offLabel="Normal"
            />
            <TextAreaForm label="M√¥ t·∫£" name="description" placeholder="Nh·∫≠p m√¥ t·∫£" />
            <div className="flex justify-center">
                <Button type="submit" variant="primary" className="mt-4" size="md">
                    S·ª≠a S·∫£n Ph·∫©m
                </Button>
            </div>
        </Form>
    );
}
